--> Funciones como parámetros

En JavaScript, los parámetros de funciones son por defecto undefined. De todos modos, en algunas situaciones puede
ser útil colocar un valor por defecto diferente que lo evalúe como verdadero.


--> Cómo funciona el asincronismo en JavaScript

JavaScript sólo puede hacer una cosa a la vez, sin embargo; es capaz de delegar la ejecución de ciertas funciones a otros procesos.
Este modelo de concurrencia se llama EventLoop.

JavaScript delega en el navegador ciertas tareas y les asocia funciones que deberán ser ejecutadas al ser completadas. Estas funciones
se llaman callbacks, y una vez que el navegador ha regresado con la respuesta, el callback asociado pasa a la cola de tareas para ser
ejecutado una vez que JavaScript haya terminado todas las instrucciones que están en la pila de ejecución.

Si se acumulan funciones en la cola de tareas y JavaScript se encuentra ejecutando procesos muy pesados, el EventLoop quedará bloqueado
y esas funciones pudieran tardar demasiado en ejecutarse.


--> Cómo funciona el tiempo en JavaScript

En principio, cualquier tarea que se haya delegado al navegador a través de un callback, deberá esperar hasta que todas las
instrucciones del programa principal se hayan ejecutado. Por esta razón el tiempo de espera definido en funciones como setTimeout,
no garantizan que el callback se ejecute en ese tiempo exactamente, sino en cualquier momento a partir de allí, sólo cuando la cola
de tareas se haya vaciado.

setTimeout(()=> instruccion, tiempoDeDemora) 


--> ¿Qué pasó con swapi.co?

Murio, ahora se usa en su lugat el swapi.dev


--> Callbacks

En esta clase aprenderemos que son los callbacks y usaremos una librería externa que se llama jQuery.

Un callback es una función que se pasa a otra función como un argumento. Esta función se invoca, después, dentro
de la función externa para completar alguna acción.


--> Haciendo múltiples requests

En esta clase accederemos a múltiples datos al mismo tiempo. Continuaremos trabajando con los jQuery y swapi.


--> Manejando el Orden y el Asincronismo en JavaScript

Una manera de asegurar que se respete la secuencia en que hemos realizado múltiples tareas es utilizando callbacks,
con lo que se ejecutará luego, en cada llamada. Lo importante es que el llamado al callback se haga a través de una
función anónima. Sin embargo, al hacerlo de esta manera generamos una situación poco deseada llamada CallbackHell.


--> Manejo de errores con callbacks

Para solucionar el problema de quedarnos sin conexión, u otro error similar, en medio de una sucesión de callbacks
utilizamos el método fail().


--> Promesas

En esta clase veremos las promesas, que son valores que aun no conocemos. Las promesas tienen tres estados:

pending
fullfilled
rejected
Las promesas se invocan de la siguiente forma:

new Promise( ( resolve, reject ) => {
  // --- llamado asíncrono
  if( todoOK ) {
     // -- se ejecutó el llamado exitosamente
     resolve()
  } else {
     // -- hubo un error en el llamado
     reject()
  }
} )


--> Promesas Encadenadas (SOLUCION AL CallbackHell)

A diferencia de los callbacks en el CallbackHell, que terminan estando anidados unos dentro de otros, cuando se usan Promesas
la ejecución de las llamadas no se hacen de manera anidada sino de manera encadenada, al mismo nivel una debajo de la otra,
lo que hace que el código sea mucho más legible y mantenible.


--> Múltiples promesas en paralelo

Para hacer el llamado a múltiples promesas, nos apoyamos en un array de ids con el que luego construimos otro arreglo
de Promesas, que pasaremos como parámetro a Promise.all( arregloDePromesas ), con las promesas podemos encadenar llamadas
en paralelo, algo que no es posible usando callbacks.


--> Async-await: lo último en asincronismo

Async-await es la manera más simple y clara de realizar tareas asíncronas. Await detiene la ejecución del programa hasta
que todas las promesas sean resueltas. Para poder utilizar esta forma, hay que colocar async antes de la definición de la
función, y encerrar el llamado a Promises.all() dentro de un bloque try … catch.


--> Cómo funcionan las clases en JavaScript

En JavaScript hablar de objetos es más bien referirse a Prototipos y no tanto a clases. Si bien en las nuevas versiones de JavaScript
existen las clases no son clases como tales, como las pordríamos conocer en cualquier otro lenguaje de programación; no existe la herencia
como tal.
Pero sí existen los Prototipos y vamos a ver que esas llamadas clases terminan siendo Prototipos.

Qué son los prototipos:

…“comenzaremos diciendo que (en JavaScript) todos los objetos dependen de un prototipo y que los prototipos son objetos, es más cualquier
objeto puede ser un prototipo”…
…"un prototipo es un objeto del que otros objetos heredan propiedades. Los objetos siempre heredan propiedades de algún objeto anterior,
de este modo solo el objeto original y primigenio de javascript es el único que no hereda de nadie…

Objetos => Prototipos

Crear un prototipo es muy similar a crear una variable:

• Se antepone el keyword function;
• La primer letra del nombre va en mayúscula;
• Para invocar un nuevo objeto a partir de este prototipo se usa el keyword ‘new’.


	functionPersona(){
		console.log('Hola, soy un nuevo objeto.')	
	}
	var pablo = new Persona()

• Se le pueden pasar parámetros;
• Para generar nuevos parámetros o atributos dentro de la declaración del objeto se usa el keyword ‘this’
• Es implícito en javaScript el retornar el objeto que se está creando


	functionPersona(nombre, apellido){
		this.nombre = nombre
		this.apellido = apellido
	}
	var pablo = new Persona('Pablo', 'Andrés')

• Es posible anexar funciones al prototipo usando el apéndice .prototype precedido de el nombre que le asignamos a nuestro nuevo
prototipo y sucedido del nombre de nuestra nueva función encadenados. Luego este se iguala a una función anónima.

• Se pueden usar los mismos atributos que en el objeto (this.xxx)


	functionPersona(nombre, apellido){
		this.nombre = nombre
		this.apellido = apellido
	}

	Persona.prototype.saludar = function(){
		console.log(`Hola me llamo ${this.nombre}${this.apellido}`)
	}

	var pablo = new Persona('Pablo', 'Andrés')
	var joaquin = new Persona('Joaquín', 'Perez')
	var rosa = new Persona('Rosa', 'Mosqueta')

	rosa.saludar()
	// Hola me llamo Rosa Mosqueta


--> Modificando un prototipo

JavaScript funciona con una estructura orientada a objetos y cada objeto tiene una propiedad privada que mantiene un
enlace a otro objeto llamado prototipo.

El prototipo es un objeto más de JS , a partir de que lo modifiquemos, éste va a quedar modificado.

Recomendacion: Siempre declarar el prototipo y seguido las funciones de este.

Un prototipo se modifica cuando le agregamos funcionalidades / métodos, es importante tener en cuenta que el código de JS se
ejecuta línea por línea de arriba hacia abajo, por lo tanto, las funcionalidades de cada objeto deben definirse todas juntas en
la parte superior del código, para que de esta forma estén disponibles a lo largo del mismo y evitarnos errores al llamar algún
método / función del objeto antes de su declaración.


--> El contexto de las funciones: quién es this

Por qué al introducir el arrow function salió un error? El error del contexto de this en JavaScript es uno de los errores más comunes.

Recuerda que dentro de la arrow function, this está haciendo referencia al espacio global, a windows.

Window es el objeto global dentro del navegador.

Cuando this no es lo que esperamos, este es el principal error en JS.

En las Arrow functions, se asigna la función , pero cambia el this dentro de la función , ya que trata de tomar el this global, es decir,
el que está fuera de la Arrow function.

Para comprobarlo en consola:

this === window // Devuelve true


--> La verdad oculta sobre las clases en JavaScript

Los objetos en JavaScript son “contenedores” dinámicos de propiedades. Estos objetos poseen un enlace a un objeto prototipo.
Cuando intentamos acceder a la propiedad de un objeto, la propiedad no sólo se busca en el propio objeto sino también en el prototipo
del objeto, en el prototipo del prototipo, y así sucesivamente hasta que se encuentre una propiedad que coincida con el nombre o se
alcance el final de la cadena de prototipos.

Cómo hago para que un prototipo herede de otro?

…“JS no soporta la herencia porque no soporta las clases, no hay clases, hay prototipos a los que les vamos agregando métodos que reciben
funciones, saben quien es ‘this’ y saben como ejecutarlas. Pero no existe un sistema como tal donde yo diga: _este prototipo va a heredar
de otro”…

Lo que sí existe es la 'herencia prototipal’
Cómo funciona? => es posible crear prototipos ‘hijo’ que van a ser un subtipo de persona en este caso, por ejemplo un ‘desarrollador’.
Este ‘hijo’, cada vez que sea requerido buscará los métodos en sí mismo, luego si no lo encuentra, en su ‘padre’, ‘abuelo’… hasta llegar al
prototipo base de todos los objetos que es ‘object’. Si ‘object’ no conoce ese mensaje, recién ahí es que javaScript lanzará el error de
que ese método no puede ejecutarse.


--> Clases en JavaScript

Las clases de JavaScript son introducidas en el ECMAScript 2015 y son una mejora en la sintaxis sobre la herencia basada en prototipos
de JavaScript.

La palabra clave extends se usa en declaraciones de clase o expresiones de clase para crear una clase que es hija de otra clase.

El método constructor es un método especial para crear e inicializar un objeto creado a partir de una clase.
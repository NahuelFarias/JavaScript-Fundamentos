--> Variables

Diferencias entre LET vs VAR

let permite declarar variables limitando su alcance (scope) al bloque, declaración, o expresión donde se está usando. Lo anterior
diferencia la expresión let de la palabra reservada var , la cual define una variable global o local en una función sin importar
el ámbito del bloque.

Cuando usamos let dentro de un bloque, podemos limitar el alcance de la variable a dicho bloque. Notemos la diferencia a con var,
cuyo alcance reside dentro de la función donde ha sido declarada la variable.

var a = 5;
var b = 10;

if (a === 5) {
  let a = 4; // El alcance es dentro del bloque if
  var b = 1; // El alcance es global

  console.log(a);  // 4
  console.log(b);  // 1
} 

console.log(a); // 5
console.log(b); // 1

Recuerden tenemos 3 tipos de varibles en JS:
var = Una varible global
const = Una varible en la cual no se puede cambiar su contenido
let = Varible que permite declarar variables limitando su alcance


--> Variables: Strings

Los strings son cadenas de texto. Para indicar que estamos usando una cadena de texto debemos de colocar las comillas simples.

En este curso utilizaremos los métodos:

toUpperCase, que sirve para transformar un String a mayúsculas.
toLowerCase, que sirve para transformar el string a minúsculas.
También usaremos el atributo:

length, que nos indica la cantidad de caractéres que tiene un string.
Para concatenar dos strings se utiliza el símbolo (+)
var nombreCompleto = nombre + ’ ’ + apellido

------------------------------------------------

str.toUpperCase() - Cambia el string a mayúsculas
str.toLowerCase() - Cambia el string a minúsculas
str.charAt() - Trae el carácter en la posición en, requiere el parámetro de la posición del carácter al que queremos acceder.
*** El 1er caracter de todo string se encuentra en la posición 0. str.charAt(0) .

str.length - Se llama al atributo length, que entrega la cantidad de letras que contiene un string.
Interpolación de variables :
Se realiza con las comillas invertidas “``”:

${var1} ${var2}

*** Dentro de las llaves se puede escribir código js.

${str.toUpperCase()}

str.substr(posicion, número de caracteres a traer) - trae una subcadena, la cual es cortada dependiendo del 1er parámetro
que es desde donde queremos que empiece y del 2ndo parámetro que es cuántos caracteres queremos que traiga la subcadena.


--> Variables: Números

En esta clase aprenderemos variables de tipo números y las operaciones más comunes en este tipo de variables.

En esta clase veremos operadores matemáticos como:

suma ( + )
resta ( - )
multiplicación
división
Recerda que en operaciones con decimales debemos realizar operaciones adicionales para conseguir un resultado preciso. 
Ej. var total = ( precioDeVino * 100 * 3) / 100

Para redondear una operación se utiliza la función: Math.round

Incrementar el valor de una variable :

var = var + 1
var += 1

Decrementar el valor de una variable :

var = var - 1
var -= 1

Suma de 2 números :

var = var1 + var2

En js la manera de almacenar decimales no es tan precisa, ya que js destina cierta cantidad de bytes de la memoria RAM para
asignar un número decimal.

El módulo de matemáticas Math nos ayuda a realizar cálculos más precisos.

  str.toFixed(número de decimales) - Nos entrega una cadena con el número de decimales especificado como parámetro.

  parseFloat(str) - Convierte una string a un número de punto flotante.


--> Funciones

Las funciones son fracciones de código reutilizable. En esta clase aprenderemos a definir e invocar nuestras funciones. Para
definir una función utilizaremos la palabra reservada ““function””.

Delimitamos el cuerpo de la función usando llaves { }. Los parámetros de la función son variables que se pasan a la función
escribíendolos entre paréntesis ()

Definir funciones nos sirve para reutilizar código. JavaScript es un lenguaje interpretado, esto quiere decir que intentará
ejecutar el código sin importar si los parámetros que le pasemos a la función estén invertidos o incluso incompletos.

------------------------

Es importante recalcar la diferencia y la importancia de la comilla invertida comparada con la comilla simple.
En general la comilla invertida nos permite mas eficiencia al tener que concatenar varias lineas de codigo o concatenar
texto con variables.

Por ejemplo:

Comilla simple

  functionimprimirEdad(n,e){
      console.log(n + ' tiene '+ e + ' años')
  }

Comilla invertida

  functionimprimirEdad(n,e){
      console.log(`${n} tiene ${e} años`)
  }

Para agregar variables dentro de las comillas simplemente se utiliza la siguiente expresion
${variable}


--> El alcance de las funciones

En esta clase hablaremos del alcance que tienen las funciones. Si una variable no está definida dentro del cuerpo de una
función hablamos de una variable global. Por el contrario, una variable definida dentro de una función es una variable local.

Para que la ejecución de una función no modifique una variable global usamos parámetros en lugar de pasar directamente la
variable.

Es posible utilizar el mismo nombre para una variable global y para el parámetro de una función con un alcance local.

ALCANCE DE LAS FUNCIONES
Hace referencia a cuáles variables puede acceder una funcion y el valor que tienen al momento de invocar la funcion.

Variable global: Variable que no esta definida dentro de una funcion sino por fuera de ella.
Al hacer referencia directa a una variable global dentro de una funcion, podermos modificar su valor, esto se le denomina
sideEfect, y esto lo vamos a querer evitar.

Para acceder a la variable global, hacemos referencia al objeto global, en este caso por estar en el browser accedemos con
window.nombre

var nombre = 'Cocosette'

  functionimprimirNombreEnMayusculas() {
      nombre = nombre.toUpperCase()
      console.log(nombre)
  }

  imprimirNombreEnMayusculas() 

El alcance de la siguiente funcion solo es para la variable local que le llega por parametro

  function imprimirNombreEnMayusculas1(n) {
      n = n.toLowerCase()
      console.log(n)
  }

  imprimirNombreEnMayusculas1(nombre)


--> Objetos

Los objetos se definen delimitados mediante llaves {}

Un atributo se compone de una clave (key) y un valor (value), que se separan entre sí por dos puntos “”:"". Los valores pueden
ser de tipo string, número, booleano, etc. Cada atributo está separado del siguiente por una coma. Un objeto puede tener todos
los atributos que sean necesarios.

Escribir el nombre de un objeto separado por un punto del nombre de un atributo, nos permite acceder al valor de dicho atributo
para ese objeto. Un objeto también se puede pasar como atributo en una función.

Las últimas versiones de JavaScript nos permiten desglosar el objeto para acceder únicamente al atributo que nos interesa. Esto
se consigue encerrando el nombre del atributo entre llaves { }.


--> Desestructurar objetos

En esta clase aprenderemos otra forma de acceder a los atributos de los objetos que es la desestructurización de los mismos.
Para no duplicar las variables introducir el nombre de la variable como parámetro de la segunda variable. 
Ej var{nombre} = persona

NOTA: 
  var nombre = persona.nombre; === var { nombre } = persona;


--> Parámetros como referencia o como valor

Javascript se comporta de manera distinta cuando le pasamos un objeto como parámetro.

Cuando los objetos se pasan como una referencia, estos se modifican fuera de la función.
Para solucionar esto se puede crear un objeto diferente. Esto lo podemos hacer colocando tres puntos antes del nombre. 
Ej …persona.


--> Comparaciones en JavaScript

Existen varias maneras de comparar variables u objetos dentro de javascript. En el primer ejemplo le asignamos a X un valor
numérico y a Y un string. Para poder compararlos debemos agregar dos signos de igual (==). Esto los convierte al mismo tipo
de valor y permite que se puedan comparar.

Cuando realizamos operaciones es recomendable usar tres símbolos de igual (===). Esto permite que JavasScript no iguale las
variables que son de distinto tipo. Te recomendamos que uses el triple igual siempre que estés comparando variables.

Existen cinco tipos de datos que son primitivos:

  Boolean
  Null
  Undefined
  Number
  String